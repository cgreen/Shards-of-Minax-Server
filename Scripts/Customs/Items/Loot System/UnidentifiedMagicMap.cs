using System;
using System.Collections.Generic;
using Server;
using Server.Items;
using Server.Mobiles;
using Server.SkillHandlers;   // for SkillName

namespace Server.Items
{
    public class UnidentifiedMagicMap : BaseUnidentifiedItem
    {
        // ———— TREASURE TABLES ————
        private static readonly Type[] Tier1Potions = {
            typeof(AbbadonTheAbyssalMap),
            typeof(AbyssalWardenMap),
            typeof(AbyssinianTrackerMap),
            typeof(AcidicAlligatorMap),
            typeof(AlchemicalLabMap),
            typeof(AncientAlligatorMap),
            typeof(AncientDragonsLairMap),
            typeof(AngusBerserkersCampMap),
            typeof(BloodstainedFieldsMap),
            typeof(CorruptedOrchardMap),
            typeof(DogTheBountyHuntersDenMap),
            typeof(DuelistPoetArenaMap),
            typeof(EarthClanNinjaLairMap),
            typeof(EarthClanSamuraiEncampmentMap),
            typeof(EvilAlchemistLaboratoryMap),
            typeof(EvilClownCarnivalMap),
            typeof(FairyQueenGladeMap),
            typeof(FastExplorerExpeditionMap),
            typeof(FireClanNinjaHideoutMap),
            typeof(FireClanSamuraiDojoMap),
            typeof(FlapperElementalistAltarMap),
            typeof(FloridaMansCarnivalMap),
            typeof(ForestRangerOutpostMap),
            typeof(FunkFungiFamiliarGardenMap),
            typeof(GangLeadersHideoutMap),
            typeof(GlamRockMageConcertMap),
            typeof(GothicNovelistCryptMap),
            typeof(GraffitiGargoyleAlleyMap),
            typeof(GreaserGryphonRidersArenaMap),
            typeof(GreenHagsSwampMap),
            typeof(GreenNinjasHiddenLairMap),
            typeof(HippieHoplitesGroveMap),
            typeof(HolyKnightsCathedralMap),
            typeof(HostileDruidsGladeMap),
            typeof(HostilePrincessCourtMap),
            typeof(IceKingsDomainMap),
            typeof(InfernoDragonsLairMap),
            typeof(InsaneRoboticistWorkshopMap),
            typeof(JazzAgeBrawlMap),
            typeof(JestersCourtMap),
            typeof(LawyersTribunalMap),
            typeof(LineDragonsAscentMap),
            typeof(LordBlackthornsDominionMap),
            typeof(LordBritishsSummoningCircleMap),
            typeof(MagmaElementalRiftMap),
            typeof(MedievalMeteorologistsObservatoryMap),
            typeof(MegaDragonsLairMap),
            typeof(MinaxSorceressSanctumMap),
            typeof(MischievousWitchCovenMap)
        };
        private static readonly Type[] Tier2Potions = {
            typeof(MotownMermaidLagoonMap),
            typeof(MushroomWitchGroveMap),
            typeof(MusketeerHallMap),
            typeof(MysticGroveMap),
            typeof(NeovictorianVampireCourtMap),
            typeof(NinjaLibrarianSanctumMap),
            typeof(NoirDetectiveHideoutMap),
            typeof(OgreMastersDomainMap),
            typeof(PhoenixStyleMastersArenaMap),
            typeof(PigFarmersPenMap),
            typeof(PinupPandemoniumParlorMap),
            typeof(PirateOfTheStarsOutpostMap),
            typeof(PiratesCoveMap),
            typeof(PkMurderersHideoutMap),
            typeof(RaKingsPyramidMap),
            typeof(RanchMastersPrairieMap),
            typeof(RapRangersJungleMap),
            typeof(RaveRoguesUndergroundMap),
            typeof(RebelCathedralMap),
            typeof(RedQueensCourtMap),
            typeof(ReggaeRunesmithWorkshopMap),
            typeof(RenaissanceMechanicFactoryMap),
            typeof(RetroAndroidWorkshopMap),
            typeof(RetroFuturistDomeMap),
            typeof(RetroRobotRomancersLairMap),
            typeof(RingmastersCircusMap),
            typeof(RockabillyRevenantsStageMap),
            typeof(SanctuaryOfTheHolyKnightMap),
            typeof(ScorpomancersDomainMap),
            typeof(SilentMovieStudioMap),
            typeof(SilverSlimeCavernsMap),
            typeof(SithAcademyMap),
            typeof(SkaSkaldConcertHallMap),
            typeof(SkeletonLordCryptMap),
            typeof(SlimeMageSwampMap),
            typeof(SneakyNinjaClanMap),
            typeof(StarCitizenOutpostMap),
            typeof(StarfleetCaptainsCommandMap),
            typeof(StarfleetCommandCenterMap),
            typeof(SteampunkSamuraiForgeMap),
            typeof(StormtrooperAcademyMap),
            typeof(SurferSummonerCoveMap),
            typeof(SwampThingLairMap),
            typeof(SwinginSorceressBallroomMap),
            typeof(TexanRancherPrairieMap),
            typeof(TwistedCultistHideoutMap),
            typeof(VaudevilleValkyrieStageMap),
            typeof(WastelandBikerCompoundMap)
        };
        private static readonly Type[] Tier3Potions = {
            typeof(WaterClanNinjaHideoutMap),
            typeof(WaterClanSamuraiFortressMap),
            typeof(WildWestWizardCanyonMap),
            typeof(FleshEaterOgreTombMap),
            typeof(FlyingSquirrelHollowMap),
            typeof(ForgottenWardenCryptMap),
            typeof(FoxSquirrelGlenMap),
            typeof(FrenziedSatyrsForestMap),
            typeof(FrostbiteWolfsDomainMap),
            typeof(FrostboundChampionsHallMap),
            typeof(FrostDroidFactoryMap),
            typeof(FrostLichsCryptMap),
            typeof(FrostOgreLairMap),
            typeof(FrostWapitiGroundsMap),
            typeof(FrostWardenWatchMap),
            typeof(FrozenOozeCaveMap),
            typeof(FungalToadSwampMap),
            typeof(GeminiHarpysLairMap),
            typeof(GeminiTwinBearsDenMap),
            typeof(GentleSatyrsGroveMap),
            typeof(GiantForestHogsNestMap),
            typeof(GiantWolfSpidersWebMap),
            typeof(GoliathBirdeatersLairMap),
            typeof(GoralsDomainMap),
            typeof(GrapplerDronesArenaMap),
            typeof(GraveKnightsCryptMap),
            typeof(GummySheepsPastureMap),
            typeof(InfernoStallionArenaMap),
            typeof(InfinitePouncersDenMap),
            typeof(IroncladDefendersFortressMap),
            typeof(IroncladOgresDomainMap),
            typeof(IronGolemsWorkshopMap),
            typeof(IronSteedStablesMap),
            typeof(JavelinaJinxHuntMap),
            typeof(JellybeanJestersCarnivalMap),
            typeof(KasTheBloodyhandedCryptMap),
            typeof(KelthuzadsFrozenCitadelMap),
            typeof(KhufuTheGreatBuildersTombMap),
            typeof(LairOfTheGibbonMysticsGroveMap),
            typeof(LairOfTheGlisteningOozesCavernMap),
            typeof(LairOfTheGloomOgresFortressMap),
            typeof(LairOfTheGloomWolfsDenMap),
            typeof(LairOfTheGoldenOrbWeaversWebMap),
            typeof(LairOfTheHatshepsutTheQueensTombMap),
            typeof(LairOfTheHogWildsSwinePenMap),
            typeof(LairOfTheHowlerMonkeysJungleMap),
            typeof(LairOfTheHuntsmanSpidersLairMap),
            typeof(LairOfTheHydrokineticWardensWaterShrineMap),
            typeof(LairOfTheIbexHighlandMap),
            typeof(LairOfTheIndianPalmSquirrelGroveMap)
        };
        private static readonly Type[] Tier4Potions = {
            typeof(LairOfTheInfernalLichCitadelMap),
            typeof(LairOfTheInfernalToadSwampMap),
            typeof(LairOfTheInfernoSentinelFortressMap),
            typeof(LairOfTheLibraBalanceBearMap),
            typeof(LairOfTheLibraHarpyMap),
            typeof(LairOfTheLicoriceSheepMap),
            typeof(LairOfTheLollipopLordMap),
            typeof(LairOfTheLuchadorLlamaMap),
            typeof(LairOfTheMalariaratDenMap),
            typeof(LairOfTheMandrillshamanJungleMap),
            typeof(LairOfTheMarkhorPeaksMap),
            typeof(LairOfTheMeatgolemLaboratoryMap),
            typeof(LairOfTheMelodicsatyrGroveMap),
            typeof(LairOfTheMountainGorillaMap),
            typeof(LairOfTheMuckGolemMap),
            typeof(LairOfTheMysticFallowMap),
            typeof(LairOfTheMysticSatyrMap),
            typeof(LairOfTheNagashMap),
            typeof(LairOfTheNefertitisTombMap),
            typeof(LarlochTheShadowKingsCryptMap),
            typeof(LeoTheHarpysLairMap),
            typeof(LeoTheSunBearsDenMap),
            typeof(LeprosyRatNestMap),
            typeof(MentuhotepTheWiseTombMap),
            typeof(MetallicWindsteedPeaksMap),
            typeof(MimicronsLairMap),
            typeof(MireSpawnerMarshMap),
            typeof(MoltenSlimePitMap),
            typeof(NanoSwarmLabMap),
            typeof(NebulaCatsCelestialRealmMap),
            typeof(NecroticGeneralsBattlefieldMap),
            typeof(NecroticLichsTombMap),
            typeof(NecroticOgresDomainMap),
            typeof(NemesisUnitFacilityMap),
            typeof(NightmareLeaperAbyssMap),
            typeof(NightmarePanthersDomainMap),
            typeof(OmegaSentinelsFortressMap),
            typeof(OrangutanSageGroveMap),
            typeof(OverlordMkiiStrongholdMap),
            typeof(PeccaryProtectorForestMap),
            typeof(PeppermintPuffDomainMap),
            typeof(PhantomAutomatonVaultMap),
            typeof(PhantomPanthersDomainMap),
            typeof(PlagueLichsCryptMap),
            typeof(PlasmaJuggernautsForgeMap),
            typeof(PurseSpidersLairMap),
            typeof(QuantumGuardiansRealmMap),
            typeof(RabidRatLairMap),
            typeof(RadiantSlimeCavernMap)
        };
        private static readonly Type[] Tier5Potions = {
            typeof(RaistlinMajeresTowerMap),
            typeof(RamsesTheImmortalTombMap),
            typeof(RedSquirrelNestMap),
            typeof(RedtailedSquirrelGroveMap),
            typeof(BreezePhantomAbyssMap),
            typeof(BubbleFerretForestMap),
            typeof(CelestialDragonShrineMap),
            typeof(CerebralEttinCavernMap),
            typeof(ChanequeGroveMap),
            typeof(ChimereonSwampMap),
            typeof(CinderWraithRuinsMap),
            typeof(CorruptingCreeperForestMap),
            typeof(CrystalDragonCavernMap),
            typeof(CrystalWardenTempleMap),
            typeof(CursedHarbingerCryptMap),
            typeof(CycloneDemonPlainsMap),
            typeof(DairyWraithFieldMap),
            typeof(DeadlordFortressMap),
            typeof(DreadedCreeperHollowMap),
            typeof(DreamyFerretHollowMap),
            typeof(DrolaticWastesMap),
            typeof(DryadGroveMap),
            typeof(EarthquakeEttinDenMap),
            typeof(ElderTendrilSwampMap),
            typeof(EmberSerpentLairMap),
            typeof(EmberSpiritDomainMap),
            typeof(EtherealCrabNestMap),
            typeof(EtherealDragonsKeepMap),
            typeof(FirebreathAlligatorSwampMap),
            typeof(FireRoosterCavernMap),
            typeof(FlameBearerCaveMap),
            typeof(FlameWardenEttinFortressMap),
            typeof(FlareImpNestMap),
            typeof(FossilElementalCavernMap),
            typeof(FrostBearDomainMap),
            typeof(FrostbiteAlligatorSwampMap),
            typeof(FrostboundBehemothCaveMap),
            typeof(FrostDrakonKeepMap),
            typeof(FrostHensPerchMap),
            typeof(FrostSerpentLairMap),
            typeof(FrostWardenEttinStrongholdMap),
            typeof(FrostyFerretsBurrowMap),
            typeof(GaleWispsDomainMap),
            typeof(GiantTrapdoorSpiderLairMap),
            typeof(GiantWolfSpiderNestMap),
            typeof(GlimmeringFerretBurrowMap),
            typeof(GoldenOrbWeaverCavernMap),
            typeof(GoliathBirdeaterJungleMap),
            typeof(GorgonVipersLairMap),
            typeof(GraniteColossusCavernMap),
            typeof(GrimoriesTomeMap),
            typeof(GrotesqueOfRouensCryptMap),
            typeof(GrymalkinTheWatchersDomainMap),
            typeof(GuernseyGuardianKeepMap),
            typeof(HarmonyFerretGroveMap),
            typeof(HellfireJuggernautForgeMap),
            typeof(HerefordWarlockTowerMap),
            typeof(HighlandBullHerdMap),
            typeof(HuntsmanSpidersLairMap),
            typeof(IceCrabCavernMap),
            typeof(IllusionarySwampMap),
            typeof(IllusionHensParadiseMap),
            typeof(IllusionistEttinsDomainMap),
            typeof(InfernalDukesCitadelMap),
            typeof(InfernalIncineratorForgeMap),
            typeof(InfernoDrakonsRoostMap),
            typeof(InfernoPythonPitMap),
            typeof(InfernoWardensFortressMap),
            typeof(IshKarTheForgottenLairMap),
            typeof(JerseyEnchantressCovenMap),
            typeof(LairOfTheShadowogresDomainMap),
            typeof(LairOfTheShadowprowlersHuntMap),
            typeof(LairOfTheShadowsludgesSwampMap),
            typeof(LairOfTheShadowtoadsBogMap),
            typeof(LairOfTheSifakawarriorsJungleMap),
            typeof(LairOfTheSmallpoxRatLairMap),
            typeof(LairOfTheSombreroDeSolLlamaMap),
            typeof(LairOfTheSombreroLlamaMap),
            typeof(LairOfTheSothTheDeathKnightMap),
            typeof(LairOfTheSoulEaterLichMap),
            typeof(LairOfTheTahrsWildHordeMap),
            typeof(LairOfTheTalonmachinesForgeMap),
            typeof(LairOfTheTaurusearthbearsDominionMap),
            typeof(LairOfTheTaurusharpysSkiesMap),
            typeof(LairOfTheTempestsatyrsStormMap),
            typeof(LairOfTheVietnamesePigMap),
            typeof(LairOfTheVileToadMap),
            typeof(LairOfTheVirgoHarpyMap),
            typeof(LairOfTheVirgoPurityBearMap),
            typeof(LairOfTheVoidCatMap),
            typeof(LairOfTheVoidSlimeMap),
            typeof(LairOfTheVolcaniccHargerMap),
            typeof(LairOfTheVortexConstructMap),
            typeof(LairOfTheVortexWraithMap),
            typeof(LairOfTheWarthogWarriorMap),
            typeof(LairOfTheWraithlichCryptMap),
            typeof(LairOfTheYangstallionPlainsMap),
            typeof(LairOfTheYinsteedForestMap),
            typeof(LavaCrabCavernMap),
            typeof(LavaFiendFortressMap),
            typeof(LeafBearGroveMap),
            typeof(LeprechaunsLairMap),
            typeof(LightBearersSanctuaryMap),
            typeof(MagmaGolemForgeMap),
            typeof(MagneticCrabCavernMap),
            typeof(MaineCoonTitansRoostMap),
            typeof(MilkingDemonStablesMap),
            typeof(RhythmicSatyrsGladeMap)
        };
        private static readonly Type[] Tier6Potions = {
            typeof(RockSquirrelCavernMap),
            typeof(SableAntelopeSavannaMap),
            typeof(SagittariusArcherBearForestMap),
            typeof(SagittariusHarpysPerchMap),
            typeof(SandGolemsTombMap),
            typeof(ScorpioHarpysLairMap),
            typeof(ScorpionSpidersHollowMap),
            typeof(ScorpioVenomBearsDenMap),
            typeof(SetiTheAvengersCryptMap),
            typeof(ShadowbladeAssassinsLairMap),
            typeof(ShadowGolemsAbyssMap),
            typeof(ShadowLichsNecropolisMap),
            typeof(ShadowMuntjacsDomainMap),
            typeof(SpectralAutomatonForgeMap),
            typeof(SpectralToadSwampMap),
            typeof(SpectralWardenCryptMap),
            typeof(SpiderlingMinionBroodmotherMap),
            typeof(SpiderMonkeyJungleMap),
            typeof(StarbornPredatorNestMap),
            typeof(SteamLeviathanAbyssMap),
            typeof(StoneGolemCavernMap),
            typeof(StoneSteedStablesMap),
            typeof(StormBoneFortressMap),
            typeof(SynthroidPrimeFactoryMap),
            typeof(SzassTamsNecropolisMap),
            typeof(TacoLlamaFestivalMap),
            typeof(TacticalEnforcerOperationsMap),
            typeof(TaffyTitansArenaMap),
            typeof(TequilaLlamaTavernMap),
            typeof(TheForestTempestMap),
            typeof(TheStormOfDeathMap),
            typeof(TheTempestsFuryMap),
            typeof(TheTempestsWrathMap),
            typeof(TheWrathOfTheThunderKingMap),
            typeof(ThutmoseTheConquerorsTombMap),
            typeof(TidalMaresDeepMap),
            typeof(ToxicLichsLairMap),
            typeof(ToxicOgresStrongholdMap),
            typeof(ToxicSludgeSwampMap),
            typeof(TrapdoorSpiderNestMap),
            typeof(TsunamiTitansDeepMap),
            typeof(TutankhamunTheCursedTombMap),
            typeof(TyphusRatInfestationMap),
            typeof(VampiricBladesLairMap),
            typeof(VecnasSanctumMap),
            typeof(VenomousRoesMarshMap),
            typeof(VenomousToadsSwampMap),
            typeof(VenomousWolfsLairMap),
            typeof(WhisperingPookaGroveMap),
            typeof(WickedSatyrsForestMap),
            typeof(WoodGolemsHollowMap),
            typeof(WoodlandChargerDomainMap),
            typeof(WoodlandSpiritHorseMeadowMap),
            typeof(MoltenGolemCavernMap),
            typeof(MordrakesManorMap),
            typeof(MudGolemSwampMap),
            typeof(MysticFerretSanctuaryMap),
            typeof(MysticFowlSanctuaryMap),
            typeof(MysticWispRealmMap),
            typeof(NatureDragonsLairMap),
            typeof(NecroEttinCryptMap),
            typeof(NecroRoosterTombMap),
            typeof(NightshadeBrambleGroveMap),
            typeof(NymphsSanctuaryMap),
            typeof(NyxRithRuinsMap),
            typeof(PersianShadeTombMap),
            typeof(PhantomVinesOvergrowthMap),
            typeof(PoisonousCrabCoveMap),
            typeof(PoisonPulletFarmMap),
            typeof(PucksMischiefMap),
            typeof(PuffyFerretHollowMap),
            typeof(PurseSpiderNestMap),
            typeof(PyroclasticGolemForgeMap),
            typeof(QuakeBringerCavernMap),
            typeof(QuorZaelsDomainMap),
            typeof(RagdollGuardianCitadelMap),
            typeof(RagingAlligatorSwampMap),
            typeof(RathzorTheShatteredsLairMap),
            typeof(RiptideCrabCoveMap),
            typeof(RockBearCavernMap),
            typeof(SahiwalShamansGroveMap),
            typeof(SandstormElementalDesertMap),
            typeof(ScorpionSpiderPitMap),
            typeof(ScottishFoldSentinelDenMap),
            typeof(SelkieCavernMap),
            typeof(ShadowAlligatorSwampMap),
            typeof(ShadowAnacondaJungleMap),
            typeof(ShadowBearsLairMap),
            typeof(ShadowChicksNestMap),
            typeof(ShadowCrabsTidepoolMap),
            typeof(ShadowDragonsRoostMap),
            typeof(ShadowDriftersMistsMap),
            typeof(SiameseIllusionistChamberMap),
            typeof(SiberianFrostclawsDomainMap),
            typeof(SidheFaeRealmMap),
            typeof(SinisterRootHollowMap)
        };
        private static readonly Type[] Tier7Potions = {
            typeof(SkeletonEttinStrongholdMap),
            typeof(SkySeraphsAerieMap),
            typeof(SolarElementalSummitMap),
            typeof(SparkFerretWildsMap),
            typeof(SphinxCatsRiddleMap),
            typeof(SpiderlingOverlordBroodmotherMap),
            typeof(StarryFerretsCelestialRealmMap),
            typeof(SteelBearDenMap),
            typeof(StoneGuardianFortressMap),
            typeof(StoneRoosterCryptMap),
            typeof(StormAlligatorSwampMap),
            typeof(StormCrabsLairMap),
            typeof(StormDaemonsDomainMap),
            typeof(StormDragonsPeakMap),
            typeof(StormHeraldsSanctuaryMap),
            typeof(StrixsPerchMap),
            typeof(SunbeamFerretHollowMap),
            typeof(TarantulaWarriorLairMap),
            typeof(TarantulaWorriorCavernMap),
            typeof(TempestSpiritDomainMap),
            typeof(TempestWyrmSpireMap),
            typeof(TerraWispGroveMap),
            typeof(ThornedHorrorSwampMap),
            typeof(ThulGorTheForsakenLairMap),
            typeof(ThunderBearHighlandsMap),
            typeof(ThunderbirdMountainMap),
            typeof(ThunderSerpentCavernMap),
            typeof(TidalEttinMarshMap),
            typeof(TitanBoaSwampMap),
            typeof(ToxicAlligatorSwampsMap),
            typeof(ToxicReaverNecropolisMap),
            typeof(TurkishAngoraEnchantersDomainMap),
            typeof(TwinTerrorEttinsFortressMap),
            typeof(UruKothsLairMap),
            typeof(VengefulPitVipersPitMap),
            typeof(VenomBearsDenMap),
            typeof(VenomousAlligatorSwampMap),
            typeof(VenomousDragonLairMap),
            typeof(VenomousEttinCaveMap),
            typeof(VenomousIvyGroveMap),
            typeof(VespaHiveMap),
            typeof(VileBlossomGroveMap),
            typeof(VitrailTheMosaicMap),
            typeof(VoidStalkerAbyssMap),
            typeof(VolcanicTitanCraterMap),
            typeof(VorgathTheDestroyerMap),
            typeof(VortexCrabReefMap),
            typeof(VortexGuardianKeepMap),
            typeof(WhirlwindFiendAbyssMap),
            typeof(WillothewispEnclaveMap),
            typeof(WindBearGroveMap),
            typeof(WindChickenNestMap),
            typeof(XalrathCultMap),
            typeof(ZebuZealotRuinsMap),
            typeof(ZelvrakStrongholdMap),
            typeof(ZephyrWardensDomainMap),
            typeof(EasternMagicMap),
            typeof(FarEasternMagicMap),
            typeof(FeluccaMagicMap),
            typeof(IlshenarMagicMap),
            typeof(NorthernMagicMap),
            typeof(SouthernMagicMap),
            typeof(TerMurMagicMap),
            typeof(TokunoMagicMap),
            typeof(TrammelMagicMap),
            typeof(WesternMagicMap),
            typeof(AirClanNinjaCampMap),
            typeof(AirClanSamuraiDojoMap),
            typeof(AlienWarriorNestMap),
            typeof(AppleGroveElementalMap),
            typeof(AssassinGuildHallMap),
            typeof(AstralTravelerRealmMap),
            typeof(AvatarOfElementsShrineMap),
            typeof(BaroqueBarbarianCampMap),
            typeof(BeetleJuiceSummoningCircleMap),
            typeof(BiomancersGroveMap),
            typeof(BluesSingingGorgonAmphitheaterMap),
            typeof(BMovieBeastmasterArenaMap),
            typeof(BountyHunterOutpostMap),
            typeof(CabaretKrakenStageMap),
            typeof(CannibalTribeCampMap),
            typeof(CavemanScientistExperimentSiteMap),
            typeof(CelestialSamuraiDojoMap),
            typeof(ChrisRobertsGalacticArenaMap),
            typeof(CorporateExecutiveTowerMap),
            typeof(CountryCowgirlCyclopsRanchMap),
            typeof(CyberpunkNexusMap),
            typeof(DarkElfCitadelMap),
            typeof(DinoRiderExpeditionMap),
            typeof(DiscoDruidFestivalMap),
            typeof(HarvestFestivalFrenzyMap),
            typeof(LongbowSniperOutpostMap),
            typeof(LuchadorTrainingGroundsMap),
            typeof(MagiciansArcaneHallMap),
            typeof(MartialMonkDojoMap),
            typeof(MasterFlutistsConcertMap),
            typeof(MechanicsWorkshopMap),
            typeof(MusclePitMap),
            typeof(NecromancersHollowMap),
            typeof(NetCasterReefMap),
            typeof(NinjaShadowHideoutMap),
            typeof(NymphSingerGladeMap),
            typeof(OraclesSanctumMap),
            typeof(PastryChefsBakeryMap),
            typeof(PatchworkMonsterLaboratoryMap),
            typeof(PathologistsLairMap),
            typeof(PhantomAssassinsHideoutMap),
            typeof(PickpocketsDenMap),
            typeof(PocketPickersRefugeMap),
            typeof(ProtestersCampMap),
            typeof(QiGongHealerSanctuaryMap),
            typeof(QuantumPhysicistResearchFacilityMap),
            typeof(RamRiderOutpostMap),
            typeof(RapierDuelistArenaMap),
            typeof(RelativistObservatoryMap),
            typeof(RelicHunterExpeditionMap),
            typeof(RuneCasterSanctumMap),
            typeof(RuneKeeperChamberMap)
        };
        private static readonly Type[] Tier8Potions = {
            typeof(SaboteurHideoutMap),
            typeof(SabreFighterArenaMap),
            typeof(SafecrackersDenMap),
            typeof(SamuraiMastersDojoMap),
            typeof(SatyrPipersGlenMap),
            typeof(SawmillWorkersDomainMap),
            typeof(ScoutArchersRefugeMap),
            typeof(ScoutLeaderEncampmentMap),
            typeof(ScrollMagesTowerMap),
            typeof(SerpentHandlerPitMap),
            typeof(ShadowLordsDomainMap),
            typeof(ShadowLurkerCavernMap),
            typeof(ShadowPriestLairMap),
            typeof(SheepdogHandlersPenMap),
            typeof(ShieldBearersBastionMap),
            typeof(ShieldMaidensCitadelMap),
            typeof(SlyStorytellersTheatreMap),
            typeof(SousChefsKitchenMap),
            typeof(SpearFishersCoveMap),
            typeof(SpearSentryKeepMap),
            typeof(SpellbreakersTrialMap),
            typeof(SpiritMediumsSeanceMap),
            typeof(SpyHideoutMap),
            typeof(StarReaderObservatoryMap),
            typeof(StormConjurerSummitMap),
            typeof(StrategistsWarTableMap),
            typeof(SumoWrestlerArenaMap),
            typeof(SwordDefenderCitadelMap),
            typeof(TaekwondoDojoMap),
            typeof(TerrainScoutEncampmentMap),
            typeof(ThievesGuildHideoutMap),
            typeof(ToxicLaboratoryMap),
            typeof(ToxicologistsKitchenMap),
            typeof(TrapEngineerWorkshopMap),
            typeof(TrapMakersWorkshopMap),
            typeof(TrapMastersWorkshopMap),
            typeof(TrapSettersHideoutMap),
            typeof(TreeFellersGroveMap),
            typeof(TrickShotArtistsArenaMap),
            typeof(UrbanTrackersOutpostMap),
            typeof(VenomousAssassinsLairMap),
            typeof(ViolinistsOrchestraMap),
            typeof(WardCastersKeepMap),
            typeof(WaterAlchemistsLaboratoryMap),
            typeof(WeaponEnchantersSanctumMap),
            typeof(WildWestOutpostMap),
            typeof(WoolWeaversLoomMap),
            typeof(ZenMonksSanctuaryMap),
            typeof(AnvilHurlerForgeMap),
            typeof(AquaticTamerLagoonMap),
            typeof(ArcaneScribeEnclaveMap),
            typeof(ArcticNaturalistDenMap),
            typeof(ArmorCurerLaboratoryMap),
            typeof(ArrowFletchersRoostMap),
            typeof(AsceticHermitsRefugeMap),
            typeof(AstrologersObservatoryMap),
            typeof(BanneretsBastionMap),
            typeof(BattleDressmakersWorkshopMap),
            typeof(BattlefieldHealersSanctuaryMap),
            typeof(BattleHerbalistGroveMap),
            typeof(BattleStormCallersEyeMap),
            typeof(BattleWeaverLoomMap),
            typeof(BeastmastersDomainMap),
            typeof(BigCatTamerJungleMap),
            typeof(BiologistsLaboratoryMap),
            typeof(BirdTrainersAviaryMap),
            typeof(BoneShielderCryptMap),
            typeof(BoomerangThrowerCampMap),
            typeof(CabinetMakersWorkshopMap),
            typeof(CarversAtelier),
            typeof(ChemistsLaboratory),
            typeof(ChoirSingersHallMap),
            typeof(ClockworkEngineersWorkshopMap),
            typeof(ClueSeekersPuzzleGroundsMap),
            typeof(CombatMedicsSanctuaryMap),
            typeof(CombatNursesRecoveryWardMap),
            typeof(ConArtistsDenMap),
            typeof(ContortionistsCircusMap),
            typeof(CrimeSceneTechInvestigationMap),
            typeof(CrossbowMarksmanOutpostMap),
            typeof(CryingOrphanRefugeMap),
            typeof(CryptologistsChamberMap),
            typeof(DarkSorcererDomainMap),
            typeof(DeathCultistCryptMap),
            typeof(DecoyDeployerOutpostMap),
            typeof(DeepMinerExcavationMap),
            typeof(DemolitionExpertQuarryMap),
            typeof(DesertNaturalistOasisMap),
            typeof(DesertTrackersOasisMap),
            typeof(DiplomatsParleyMap),
            typeof(DisguiseMastersHavenMap),
            typeof(DivinersPeakMap)
        };
        private static readonly Type[] Tier9Potions = {
            typeof(DrumBoysSpectacleMap),
            typeof(DrummersArenaMap),
            typeof(DualWielderDojoMap),
            typeof(EarthAlchemistsLairMap),
            typeof(ElectriciansWorkshopMap),
            typeof(ElementalWizardsKeepMap),
            typeof(EnchantersLabyrinthMap),
            typeof(EpeeSpecialistArenaMap),
            typeof(EscapeArtistHideoutMap),
            typeof(EvidenceAnalystsBureauMap),
            typeof(EvilMapMakersWorkshopMap),
            typeof(ExplorersExpeditionMap),
            typeof(ExplosiveDemolitionistsFoundryMap),
            typeof(FeastMastersBanquetMap),
            typeof(FencingMastersArenaMap),
            typeof(FieldCommanderOutpostMap),
            typeof(FieldMedicCampMap),
            typeof(FireAlchemistLaboratoryMap),
            typeof(FireMageConclaveMap),
            typeof(FirestarterPyreMap),
            typeof(FlameWelderForgeMap),
            typeof(ForagersHollowMap),
            typeof(ForensicAnalystsLairMap),
            typeof(ForestMinstrelsGlenMap),
            typeof(ForestScoutOutpostMap),
            typeof(ForestTrackerCampMap),
            typeof(GemCutterCavernMap),
            typeof(GhostScoutOutpostMap),
            typeof(GhostWarriorBattlefieldMap),
            typeof(GourmetChefKitchenMap),
            typeof(GraveDiggerCryptMap),
            typeof(GrecoRomanArenaMap),
            typeof(GrillMasterPitMap),
            typeof(HammerGuardArmoryMap),
            typeof(HarpistsGroveMap),
            typeof(HerbalistPoisonerGroveMap),
            typeof(IceSorcererCitadelMap),
            typeof(IllusionistsLabyrinthMap),
            typeof(InfiltratorsHideoutMap),
            typeof(InvisibleSaboteursWorkshopMap),
            typeof(IronSmithForgeMap),
            typeof(JavelinAthleteArenaMap),
            typeof(JoinerWorkshopMap),
            typeof(JungleNaturalistGroveMap),
            typeof(KarateExpertDojoMap),
            typeof(KatanaDuelistDojoMap),
            typeof(KnifeThrowersArenaMap),
            typeof(KnightOfJusticeCitadelMap),
            typeof(KnightOfMercyChapelMap),
            typeof(KnightOfValorFortressMap),
            typeof(KunoichiHideoutMap),
            typeof(LibrarianCustodiansArchiveMap),
            typeof(LightningBearersStormNexusMap),
            typeof(LocksmithsWorkshopMap),
            typeof(LogiciansPuzzleHallMap),
            typeof(MeraktusTheTormentedMap),
            typeof(AbyssalBouncersArenaMap),
            typeof(AbyssalPanthersProwlMap),
            typeof(AbyssalTidesSurgeMap),
            typeof(AcereraksNecropolisMap),
            typeof(AcidicSlimesLairMap),
            typeof(AegisConstructForgeMap),
            typeof(AkhenatensHereticShrineMap),
            typeof(AkhenatensTombMap),
            typeof(AlbertsSquirrelGladeMap),
            typeof(AlphaBaboonTroopMap),
            typeof(AncientWolfDenMap),
            typeof(AnthraxRatNestMap),
            typeof(ArbiterDroneHiveMap),
            typeof(ArcaneSatyrGladeMap),
            typeof(ArcaneSentinelBastionMap),
            typeof(AriesHarpyAerieMap),
            typeof(AriesRamBearPlateauMap),
            typeof(AzalinRexsCryptMap),
            typeof(AzureMiragesRealmMap),
            typeof(AzureMooseGroveMap),
            typeof(BabirusaBeastsBogMap),
            typeof(BansheeCrabsNestMap),
            typeof(BansheesWailMap),
            typeof(BeardedGoatPasturesMap),
            typeof(BeldingsGroundSquirrelBurrowMap),
            typeof(BengalStormsJungleMap),
            typeof(BisonBrutePlateauMap),
            typeof(BlackDeathRatSewersMap),
            typeof(BlackWidowQueenLairMap),
            typeof(BlackWidowsLairMap),
            typeof(BlightDemonFissureMap),
            typeof(BlightedToadSwampMap),
            typeof(BloodDragonRoostMap)
        };
        private static readonly Type[] Tier10Potions = {
            typeof(BloodLichsCryptMap),
            typeof(BloodSerpentsNestMap),
            typeof(BloodthirstyVinesThicketMap),
            typeof(BonecrusherOgresDomainMap),
            typeof(BoneGolemsWorkshopMap),
            typeof(BorneoPigstyMap),
            typeof(BubblegumBlasterFactoryMap),
            typeof(BushPigEncampmentMap),
            typeof(CactusLlamaGroveMap),
            typeof(CancerHarpyAerieMap),
            typeof(CancerShellBearDenMap),
            typeof(CandyCornCreepsLairMap),
            typeof(CapricornHarpysNestMap),
            typeof(CapricornMountainBearsDomainMap),
            typeof(CapuchinTrickstersPlaygroundMap),
            typeof(CaramelConjurersWorkshopMap),
            typeof(CelestialHorrorRealmMap),
            typeof(CelestialPythonDomainMap),
            typeof(CelestialSatyrGroveMap),
            typeof(CelestialWolfDenMap),
            typeof(ChamoisHillMap),
            typeof(CholeraRatInfestationMap),
            typeof(ChromaticOgreClanMap),
            typeof(CleopatraTheEnigmaticMap),
            typeof(CliffGoatDominionMap),
            typeof(CoralSentinelsReefMap),
            typeof(CorrosiveToadSwampMap),
            typeof(CosmicBouncerArenaMap),
            typeof(CosmicStalkerVoidMap),
            typeof(CrimsonMuleValleyMap),
            typeof(CrystalGolemForgeMap),
            typeof(CrystalOozeCavernMap),
            typeof(CursedToadSwampMap),
            typeof(CursedWhiteTailForestMap),
            typeof(CursedWolfsDenMap),
            typeof(DallSheepHighlandMap),
            typeof(DeathRatCavernMap),
            typeof(DiaDeLosMuertosLlamaMap),
            typeof(DisplacerBeastDomainMap),
            typeof(DomesticSwineRetreatMap),
            typeof(DouglasSquirrelForestMap),
            typeof(DreadnaughtFortressMap),
            typeof(EarthquakeWolfCavernMap),
            typeof(EasternGraySquirrelGroveMap),
            typeof(EclipseReindeerGladeMap),
            typeof(EldritchHarbingerRealmMap),
            typeof(EtherealPanthrasLairMap),
            typeof(FaintingGoatsPastureMap),
            typeof(FeverRatsDenMap),
            typeof(FiestaLlamasCelebrationMap),
            typeof(FlameborneKnightsFortressMap),
            typeof(FlamebringerOgreLairMap),
            typeof(LairOfTheChaosHareMap),
            typeof(LairOfTheCharroLlamaMap),
            typeof(LairOfTheCheeseGolemMap),
            typeof(LairOfTheChimpanzeeBerserkerMap),
            typeof(LairOfTheChocolateTruffleMap),
            typeof(LairOfTheEldritchHaresWarrenMap),
            typeof(LairOfTheEldritchToadsSwampMap),
            typeof(LairOfTheElectricSlimesLabyrinthMap),
            typeof(LairOfTheElectroWraithsRealmMap),
            typeof(LairOfTheElMariachiLlamasFiestaMap),
            typeof(LairOfTheEmberAxisForgeMap),
            typeof(LairOfTheEmberWolfDenMap),
            typeof(LairOfTheEmperorCobraTempleMap),
            typeof(LairOfTheEnigmaticSatyrGroveMap),
            typeof(LairOfTheEnigmaticSkipperReefMap)
        };

        // ———— CTORS ————
        [Constructable]
        public UnidentifiedMagicMap() : base(0x14EC) // bottle ID
        {
            Name = "Unidentified Magic Map";
			Hue = 2274;
        }

        [Constructable]
        public UnidentifiedMagicMap(int quality) : base(0x14EC, quality)
        {
            Name = "Unidentified Magic Map";
			Hue = 2274;
        }

        public UnidentifiedMagicMap(Serial serial) : base(serial) { }

        // ———— IDENTIFY METHOD ————
        public override void Identify(Mobile from)
        {
            // 1) Roll tier
            int skillBonus = (int)(from.Skills[SkillName.Cartography].Base / 10);
            int roll       = Utility.RandomMinMax(1, 100) + Quality + skillBonus;
            int tier;

            if      (roll >= 100) tier = 10;
            else if (roll >= 98)  tier =  9;
            else if (roll >= 95)  tier =  8;
            else if (roll >= 90)  tier =  7;
            else if (roll >= 82)  tier =  6;
            else if (roll >= 71)  tier =  5;
            else if (roll >= 58)  tier =  4;
            else if (roll >= 42)  tier =  3;
            else if (roll >= 22)  tier =  2;
            else                  tier =  1;

            // 2) Pick a potion for that tier
            Item newPotion = CreateFromTier(tier);

            // 3) Place it in the world or container
            if (Parent is Container c)
                c.AddItem(newPotion);
            else
                newPotion.MoveToWorld(Location, Map);

            // 4) Notify & delete
            from.SendMessage(
                $"You identify the potion (Quality {Quality}) – it becomes “{newPotion.Name}” (Tier {tier})."
            );
            Delete();
        }

        // ———— HELPER TO SELECT POTION BY TIER ————
        private static Item CreateFromTier(int tier)
        {
            Type[] list;

            switch (tier)
            {
                case  1: list = Tier1Potions;  break;
                case  2: list = Tier2Potions;  break;
                case  3: list = Tier3Potions;  break;
                case  4: list = Tier4Potions;  break;
                case  5: list = Tier5Potions;  break;
                case  6: list = Tier6Potions;  break;
                case  7: list = Tier7Potions;  break;
                case  8: list = Tier8Potions;  break;
                case  9: list = Tier9Potions;  break;
                case 10: list = Tier10Potions; break;
                default: list = Tier1Potions;  break;
            }

            if (list == null || list.Length == 0)
                return new LesserHealPotion(); // fallback

            var t = list[Utility.Random(list.Length)];
            return (Item)Activator.CreateInstance(t);
        }

        // ———— SERIALIZE / DESERIALIZE ————
        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
        }
    }
}
